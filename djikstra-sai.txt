#include <iostream>
#include <vector>
#include <limits>
#include <set>
#include <unordered_map>

using namespace std;

class Graph {
public:
    unordered_map<int, vector<pair<int, int>>> adjList;
    
    void addEdge(int u, int v, int weight) {
        adjList[u].push_back({v, weight});
        adjList[v].push_back({u, weight}); // Undirected graph
    }

    void dijkstra(int start, int end) {
        unordered_map<int, int> dist;
        unordered_map<int, int> parent;
        set<pair<int, int>> pq;

        for (auto& node : adjList) {
            dist[node.first] = numeric_limits<int>::max();
        }

        dist[start] = 0;
        pq.insert({0, start});

        while (!pq.empty()) {
            int u = pq.begin()->second;
            pq.erase(pq.begin());
            
            for (auto& neighbor : adjList[u]) {
                int v = neighbor.first;
                int weight = neighbor.second;
                
                if (dist[u] + weight < dist[v]) {
                    pq.erase({dist[v], v});
                    dist[v] = dist[u] + weight;
                    parent[v] = u;
                    pq.insert({dist[v], v});
                }
            }
        }

        if (dist[end] == numeric_limits<int>::max()) {
            cout << "No path found from " << start << " to " << end << "\n";
            return;
        }
        
        cout << "Shortest path cost: " << dist[end] << "\n";
        vector<int> path;
        for (int v = end; v != start; v = parent[v]) {
            path.push_back(v);
        }
        path.push_back(start);

        cout << "Path: ";
        for (int i = path.size() - 1; i >= 0; i--) {
            cout << path[i] << (i == 0 ? "\n" : " -> ");
        }
    }
};

int main() {
    Graph g;
    
    // Hardcoded graph data
    g.addEdge(1, 2, 4);
    g.addEdge(1, 3, 2);
    g.addEdge(2, 3, 5);
    g.addEdge(2, 4, 10);
    g.addEdge(3, 5, 3);
    g.addEdge(5, 4, 1);
    
    int start, end;
    cout << "Enter start node: ";
    cin >> start;
    cout << "Enter end node: ";
    cin >> end;
    
    g.dijkstra(start, end);
    
    return 0;
}
